name: Build & Release

on:
  push:
    branches: [ main ]
    tags:
      - "v*"
  pull_request:

jobs:
  build:
    name: Build on ${{ matrix.os }} (py ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13, macos-14]
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install Tk for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel "setuptools<81"
          pip install -r requirements.txt
          pip install pyinstaller==6.11.0

      - name: Show versions
        run: |
          python -c "import sys; print(sys.version)"
          python -c "import tkinter; print('tk', tkinter.TkVersion)"
          python -c "import matplotlib, numpy, pandas; print('matplotlib', matplotlib.__version__); print('numpy', numpy.__version__); print('pandas', pandas.__version__)"
          python -c "import scipy; print('scipy', scipy.__version__)"

      - name: Prepare macOS icon
        if: runner.os == 'macOS'
        run: |
          python - <<'PY'
          from PIL import Image, ImageDraw
          # Create simple colored icon (avoids "blank" look)
          img = Image.new('RGBA', (1024, 1024), (37, 99, 235, 255))  # blue
          draw = ImageDraw.Draw(img)
          # white border
          draw.rectangle([64,64,960,960], outline=(255,255,255,255), width=24)
          img.save('icon.png')
          PY
          mkdir -p icon.iconset
          for SIZE in 16 32 64 128 256 512 1024; do
            /usr/bin/sips -z $SIZE $SIZE icon.png --out icon.iconset/icon_${SIZE}x${SIZE}.png >/dev/null
          done
          /usr/bin/iconutil -c icns icon.iconset -o app.icns

      # macOS: .app bundle with explicit icon
      - name: PyInstaller (macOS .app)
        if: runner.os == 'macOS'
        run: |
          pyinstaller --noconfirm --clean \
            --windowed \
            --name SW3PowerAnalyzer \
            --icon app.icns \
            --collect-all numpy --collect-all pandas --collect-all matplotlib --collect-all scipy \
            --hidden-import matplotlib.backends.backend_tkagg \
            --hidden-import numpy._core._multiarray_umath \
            --hidden-import numpy._core._exceptions \
            --hidden-import numpy._distributor_init \
            --hidden-import eegbin --hidden-import util \
            gui.py

      # Linux: onedir for reliability with binary deps (NumPy/SciPy)
      - name: PyInstaller (Linux onedir)
        if: runner.os == 'Linux'
        run: |
          pyinstaller --noconfirm --clean \
            --windowed \
            --name SW3PowerAnalyzer \
            --collect-all numpy --collect-all pandas --collect-all matplotlib --collect-all scipy \
            --hidden-import matplotlib.backends.backend_tkagg \
            --hidden-import numpy._core._multiarray_umath \
            --hidden-import numpy._core._exceptions \
            --hidden-import numpy._distributor_init \
            --hidden-import eegbin --hidden-import util \
            gui.py

      # Windows: onefile, but run under Bash to accept backslash line continuations
      - name: PyInstaller (Windows onefile)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          pyinstaller --noconfirm --clean \
            --onefile --windowed \
            --name SW3PowerAnalyzer \
            --collect-all numpy --collect-all pandas --collect-all matplotlib --collect-all scipy \
            --hidden-import matplotlib.backends.backend_tkagg \
            --hidden-import numpy._core._multiarray_umath \
            --hidden-import numpy._core._exceptions \
            --hidden-import numpy._distributor_init \
            --hidden-import eegbin --hidden-import util \
            gui.py

      - name: List dist/
        run: ls -R dist
        shell: bash

      # Package artifacts per-OS
      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Compress-Archive -Path dist\SW3PowerAnalyzer.exe -DestinationPath SW3PowerAnalyzer-windows-${{ runner.arch }}.zip

      - name: Package (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          tar -C dist -czf SW3PowerAnalyzer-linux-${{ runner.arch }}.tar.gz SW3PowerAnalyzer

      - name: Package (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          ditto -c -k --sequesterRsrc --keepParent "dist/SW3PowerAnalyzer.app" "SW3PowerAnalyzer-macos-${{ runner.arch }}.zip"

      # Upload artifacts for PRs/branches
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SW3PowerAnalyzer-${{ runner.os }}-${{ runner.arch }}
          path: |
            SW3PowerAnalyzer-*.zip
            SW3PowerAnalyzer-*.tar.gz
          if-no-files-found: ignore
          retention-days: 7

      # Attach artifacts to a GitHub Release when pushing a tag v*
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            SW3PowerAnalyzer-*.zip
            SW3PowerAnalyzer-*.tar.gz
